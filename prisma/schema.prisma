generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  pending
  confirmed
  preparing
  ready
  picked_up
  cancelled
}

model categories {
  id     Int      @id @default(autoincrement())
  name   String   @db.VarChar(255)
  deleted   Boolean  @default(false)  // added soft delete column
  drinks drinks[]
}

model drinks {
  id              Int        @id @default(autoincrement())
  name            String     @db.VarChar(255)
  description     String?    @db.Text
  price           Decimal    @db.Decimal(10, 2)
  createdAt       DateTime?  @default(now()) @db.Timestamp(0)
  updatedAt       DateTime?  @default(now()) @db.Timestamp(0)
  category        Int
  stripeProductId String
  stripePriceId   String
  imageUrl        String?    @db.VarChar(255)
  deleted         Boolean    @default(false)  // added soft delete column
  categories      categories @relation(fields: [category], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_category")
  orders_drinks   orders_drinks[] // Relation with orders_drinks

  @@index([category], map: "fk_category")
}

model orders {
  id                  Int              @id @default(autoincrement())
  name                String           @db.VarChar(255)
  phone               String           @db.VarChar(255)
  status              OrderStatus      @default(pending)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  checkout_session_id String
  orders_drinks       orders_drinks[] // Relation with orders_drinks
}

model orders_drinks {
  id       Int     @id @default(autoincrement())
  drink_id Int
  order_id Int
  amount   Int
  drink    drinks  @relation(fields: [drink_id], references: [id], onDelete: Cascade, map: "fk_drink")
  order    orders  @relation(fields: [order_id], references: [id], onDelete: Cascade, map: "fk_order")
}


model users {
  id         Int      @id @default(autoincrement())
  username   String
  password   String
  profile_id Int
  profiles   profiles @relation(fields: [profile_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_profile")

  @@index([profile_id], map: "fk_profile")
}

model profiles {
  id    Int     @id @default(autoincrement())
  name  String
  users users[]
}
